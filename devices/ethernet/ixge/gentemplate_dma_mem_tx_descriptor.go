// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=ixge -id tx_descriptor -d Type=tx_descriptor -d VecType=tx_descriptor_vec github.com/platinasystems/elib/hw/dma_mem.tmpl]

package ixge

import (
	"github.com/platinasystems/elib"
	"github.com/platinasystems/elib/hw"

	"reflect"
	"unsafe"
)

type tx_descriptor_vec []tx_descriptor

func fromByteSlice_tx_descriptor(b []byte, l, c int) (x tx_descriptor_vec) {
	s := int(unsafe.Sizeof(x[0]))
	if l == 0 {
		l = len(b) / s
		c = cap(b)
	}
	return *(*tx_descriptor_vec)(unsafe.Pointer(&reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(&b[0])),
		Len:  l,
		Cap:  c / s,
	}))
}

func (x tx_descriptor_vec) toByteSlice() []byte {
	l := len(x)
	s := unsafe.Sizeof(x[0])
	l *= int(s)
	return *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(&x[0])),
		Len:  l,
		Cap:  l}))
}

func tx_descriptorAlloc(n int) (x tx_descriptor_vec, id elib.Index) {
	var b []byte
	var c uint
	b, id, _, c = hw.DmaAlloc(uint(n) * uint(unsafe.Sizeof(x[0])))
	x = fromByteSlice_tx_descriptor(b, n, int(c))
	return
}

func tx_descriptorNew() (x tx_descriptor_vec, id elib.Index) { return tx_descriptorAlloc(1) }

func (x *tx_descriptor_vec) Free(id elib.Index) {
	hw.DmaFree(id)
	*x = nil
}

func (x *tx_descriptor_vec) Get(id elib.Index) {
	*x = fromByteSlice_tx_descriptor(hw.DmaGet(id), 0, 0)
}

func (x *tx_descriptor) PhysAddress() uintptr {
	return hw.DmaPhysAddress(uintptr(unsafe.Pointer(x)))
}
