// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=main -id ReqEvent -d Type=reqEvent github.com/platinasystems/elib/elog/event.tmpl]

package main

import (
	. "github.com/platinasystems/elib/elog"

	"fmt"
	"unsafe"
)

var reqEventType = &EventType{
	Name: "main.reqEvent",
}

func init() {
	t := reqEventType
	t.Stringer = stringer_reqEvent
	t.Encoder = encoder_reqEvent
	t.Decoder = decoder_reqEvent
	RegisterType(reqEventType)
}

func stringer_reqEvent(e *Event) string {
	x := (*reqEvent)(unsafe.Pointer(&e.Data[0]))
	return x.String()
}

func encoder_reqEvent(b []byte, e *Event) int {
	x := (interface{})((*reqEvent)(unsafe.Pointer(&e.Data[0])))
	if y, ok := x.(EventDataEncoder); ok {
		return y.Encode(b)
	} else {
		return copy(b, e.Data[:])
	}
}

func decoder_reqEvent(b []byte, e *Event) int {
	x := (interface{})((*reqEvent)(unsafe.Pointer(&e.Data[0])))
	if y, ok := x.(EventDataDecoder); ok {
		return y.Decode(b)
	} else {
		return copy(e.Data[:], b)
	}
}

func reqEventNew() (x *reqEvent) {
	e := Add(reqEventType)
	if unsafe.Sizeof(*x) > unsafe.Sizeof(e.Data) {
		panic(fmt.Sprintf("type too large: reqEvent %d bytes", unsafe.Sizeof(*x)))
	}
	x = (*reqEvent)(unsafe.Pointer(&e.Data[0]))
	return
}

func (x reqEvent) Log() {
	p := reqEventNew()
	*p = x
}

func (x *reqEvent) Event() (e *Event) {
	e = (*Event)(unsafe.Pointer(uintptr(unsafe.Pointer(x)) - unsafe.Offsetof(e.Data)))
	return
}

func (x *reqEvent) LogEventString(l *Log) string {
	e := x.Event()
	return fmt.Sprintf("%s: %s", e.EventString(l), x)
}

func (x *reqEvent) EventString() string { return x.LogEventString(DefaultLog) }
